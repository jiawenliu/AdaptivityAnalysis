Raised by primitive operation at file "stdlib.ml", line 398, characters 28-54
Called from file "bin/main.ml", line 213, characters 13-35
Called from file "bin/main.ml", line 225, characters 21-38
Traceback (most recent call last):
  File "/Users/admin/iCloud Drive (Archive)/Documents/.git/AdaptiveAnalysis-jiawen/AdaptivityAnalysis/src/adaptDune/python/runner.py", line 19, in <module>
    runner.main()
  File "/Users/admin/iCloud Drive (Archive)/Documents/.git/AdaptiveAnalysis-jiawen/AdaptivityAnalysis/src/adaptDune/python/runner.py", line 13, in main
    dcf_graph = graph_parser.dcfg_parse()
  File "/Users/admin/iCloud Drive (Archive)/Documents/.git/AdaptiveAnalysis-jiawen/AdaptivityAnalysis/src/adaptDune/python/graph_parse.py", line 40, in dcfg_parse
    n = int(graphdata.readline())
ValueError: invalid literal for int() with base 10: ''
crc-dot1x-nat-10-239-36-38:adaptDune admin$ sh adaptfun.sh ./examples/compose-mR.br 
key 0, node is  AssignBlock: [ j = N ]^{0} ; 
key 1, node is  AssignBlock: [ l = 0 ]^{1} ; 
key 2, node is  AssignBlock: [ cs = -1 ]^{2} ; 
key 3, node is  AssignBlock: [ ns = -1 ]^{3} ; 
key 4, node is TestBlock:[0<j]^{4} ; 
key 5, node is  AssignBlock: [ j = j-1 ]^{5} ; 
key 6, node is  AssignBlock: [ cs = cs+0 ]^{6} ; 
key 7, node is  AssignBlock: [ ns = ns+0 ]^{7} ; 
key 8, node is  AssignBlock: [ w = k ]^{8} ; 
key 9, node is TestBlock:[0<w]^{9} ; 
key 10, node is  AssignBlock: [ w = w-1 ]^{10} ; 
key 11, node is  AssignBlock: [ p = c ]^{11} ; 
key 12, node is  AssignBlock: [ q = c ]^{12} ; 
key 13, node is QueryBlock: [ a = query( l) ]^{13} ; 
key 14, node is  AssignBlock: [ i = N ]^{14} ; 
key 15, node is TestBlock:[0<i]^{15} ; 
key 16, node is  AssignBlock: [ i = i-1 ]^{16} ; 
key 17, node is  AssignBlock: [ csi = csi+a-p*q-p ]^{17} ; 
key 18, node is TestBlock:[i>I]^{18} ; 
key 19, node is  AssignBlock: [ nsi = nsi+a-p*q-p ]^{19} ; 
key 20, node is  AssignBlock: [ nsi = nsi ]^{20} ; 
key 21, node is  AssignBlock: [ i2 = N ]^{21} ; 
key 22, node is TestBlock:[0<i2]^{22} ; 
key 23, node is  AssignBlock: [ i2 = i2-1 ]^{23} ; 
key 24, node is TestBlock:[ns>I]^{24} ; 
key 25, node is  AssignBlock: [ l = l+i2 ]^{25} ; 
key 26, node is  AssignBlock: [ l = l ]^{26} ; 
key 27, node is  AssignBlock: [ w = k ]^{27} ; 
key 28, node is TestBlock:[0<w]^{28} ; 
key 29, node is  AssignBlock: [ w = w-1 ]^{29} ; 
key 30, node is  AssignBlock: [ p = c ]^{30} ; 
key 31, node is  AssignBlock: [ q = c ]^{31} ; 
key 32, node is QueryBlock: [ a = query( l) ]^{32} ; 
key 33, node is  AssignBlock: [ i = N ]^{33} ; 
key 34, node is TestBlock:[0<i]^{34} ; 
key 35, node is  AssignBlock: [ i = i-1 ]^{35} ; 
key 36, node is  AssignBlock: [ csi = csi+a-p*q-p ]^{36} ; 
key 37, node is TestBlock:[i>I]^{37} ; 
key 38, node is  AssignBlock: [ nsi = nsi+a-p*q-p ]^{38} ; 
key 39, node is  AssignBlock: [ nsi = nsi ]^{39} ; 
key 40, node is  AssignBlock: [ i2 = N ]^{40} ; 
key 41, node is TestBlock:[0<i2]^{41} ; 
key 42, node is  AssignBlock: [ i2 = i2-1 ]^{42} ; 
key 43, node is TestBlock:[ns>I]^{43} ; 
key 44, node is  AssignBlock: [ l = l+i2 ]^{44} ; 
key 45, node is  AssignBlock: [ l = l ]^{45} ; 
The input program is : [ j = N ]^{0} ; 
 [ l = 0 ]^{1} ; 
 [ cs = -1 ]^{2} ; 
 [ ns = -1 ]^{3} ; 
 While [ 0<j ]^{4} Do {[ j = j-1 ]^{5} ; 
 [ cs = cs+0 ]^{6} ; 
 [ ns = ns+0 ]^{7}} ; 
 [ w = k ]^{8} ; 
 While [ 0<w ]^{9} Do {[ w = w-1 ]^{10} ; 
 [ p = c ]^{11} ; 
 [ q = c ]^{12} ; 
 [ a = query( l) ]^{13} ; 
 [ i = N ]^{14} ; 
 While [ 0<i ]^{15} Do {[ i = i-1 ]^{16} ; 
 [ csi = csi+a-p*q-p ]^{17} ; 
  If [ i>I ]^{18} 
 then {[ nsi = nsi+a-p*q-p ]^{19}} else { [ nsi = nsi ]^{20} }} ; 
 [ i2 = N ]^{21} ; 
 While [ 0<i2 ]^{22} Do {[ i2 = i2-1 ]^{23} ; 
  If [ ns>I ]^{24} 
 then {[ l = l+i2 ]^{25}} else { [ l = l ]^{26} }}} ; 
 [ w = k ]^{27} ; 
 While [ 0<w ]^{28} Do {[ w = w-1 ]^{29} ; 
 [ p = c ]^{30} ; 
 [ q = c ]^{31} ; 
 [ a = query( l) ]^{32} ; 
 [ i = N ]^{33} ; 
 While [ 0<i ]^{34} Do {[ i = i-1 ]^{35} ; 
 [ csi = csi+a-p*q-p ]^{36} ; 
  If [ i>I ]^{37} 
 then {[ nsi = nsi+a-p*q-p ]^{38}} else { [ nsi = nsi ]^{39} }} ; 
 [ i2 = N ]^{40} ; 
 While [ 0<i2 ]^{41} Do {[ i2 = i2-1 ]^{42} ; 
  If [ ns>I ]^{43} 
 then {[ l = l+i2 ]^{44}} else { [ l = l ]^{45} }}}l : 0
l : 1
l : 25
l : 26
l : 44
l : 45

46
DCDG result:
computation of the DCDG total time:0.003480s
(j)^{5} -> (j)^{5}
(j)^{5} -> (cs)^{6}
(j)^{5} -> (ns)^{7}
(j)^{0} -> (j)^{5}
(j)^{0} -> (cs)^{6}
(j)^{0} -> (ns)^{7}
(j)^{0} -> (j)^{5}
(j)^{5} -> (j)^{5}
(cs)^{2} -> (cs)^{6}
(cs)^{6} -> (cs)^{6}
(ns)^{3} -> (ns)^{7}
(ns)^{7} -> (ns)^{7}
(w)^{10} -> (w)^{10}
(w)^{10} -> (p)^{11}
(w)^{10} -> (q)^{12}
(w)^{10} -> (a)^{13}
(w)^{10} -> (i)^{14}
(w)^{10} -> (i)^{16}
(w)^{10} -> (csi)^{17}
(w)^{10} -> (nsi)^{19}
(w)^{10} -> (nsi)^{20}
(w)^{10} -> (i2)^{21}
(w)^{10} -> (i2)^{23}
(w)^{10} -> (l)^{25}
(w)^{10} -> (l)^{26}
(w)^{8} -> (w)^{10}
(w)^{8} -> (p)^{11}
(w)^{8} -> (q)^{12}
(w)^{8} -> (a)^{13}
(w)^{8} -> (i)^{14}
(w)^{8} -> (i)^{16}
(w)^{8} -> (csi)^{17}
(w)^{8} -> (nsi)^{19}
(w)^{8} -> (nsi)^{20}
(w)^{8} -> (i2)^{21}
(w)^{8} -> (i2)^{23}
(w)^{8} -> (l)^{25}
(w)^{8} -> (l)^{26}
(w)^{8} -> (w)^{10}
(w)^{10} -> (w)^{10}
(l)^{1} -> (a)^{13}
(l)^{25} -> (a)^{13}
(l)^{26} -> (a)^{13}
(i)^{16} -> (i)^{16}
(i)^{16} -> (csi)^{17}
(i)^{16} -> (nsi)^{19}
(i)^{16} -> (nsi)^{20}
(i)^{14} -> (i)^{16}
(i)^{14} -> (csi)^{17}
(i)^{14} -> (nsi)^{19}
(i)^{14} -> (nsi)^{20}
(i)^{14} -> (i)^{16}
(i)^{16} -> (i)^{16}
(a)^{13} -> (csi)^{17}
(csi)^{17} -> (csi)^{17}
(p)^{11} -> (csi)^{17}
(q)^{12} -> (csi)^{17}
(i)^{16} -> (nsi)^{19}
(i)^{16} -> (nsi)^{20}
(a)^{13} -> (nsi)^{19}
(nsi)^{19} -> (nsi)^{19}
(nsi)^{20} -> (nsi)^{19}
(p)^{11} -> (nsi)^{19}
(q)^{12} -> (nsi)^{19}
(nsi)^{19} -> (nsi)^{20}
(nsi)^{20} -> (nsi)^{20}
(i2)^{23} -> (i2)^{23}
(i2)^{23} -> (l)^{25}
(i2)^{23} -> (l)^{26}
(i2)^{21} -> (i2)^{23}
(i2)^{21} -> (l)^{25}
(i2)^{21} -> (l)^{26}
(i2)^{21} -> (i2)^{23}
(i2)^{23} -> (i2)^{23}
(ns)^{7} -> (l)^{25}
(ns)^{3} -> (l)^{25}
(ns)^{7} -> (l)^{26}
(ns)^{3} -> (l)^{26}
(i2)^{23} -> (l)^{25}
(l)^{1} -> (l)^{25}
(l)^{25} -> (l)^{25}
(l)^{26} -> (l)^{25}
(l)^{1} -> (l)^{26}
(l)^{25} -> (l)^{26}
(l)^{26} -> (l)^{26}
(w)^{29} -> (w)^{29}
(w)^{29} -> (p)^{30}
(w)^{29} -> (q)^{31}
(w)^{29} -> (a)^{32}
(w)^{29} -> (i)^{33}
(w)^{29} -> (i)^{35}
(w)^{29} -> (csi)^{36}
(w)^{29} -> (nsi)^{38}
(w)^{29} -> (nsi)^{39}
(w)^{29} -> (i2)^{40}
(w)^{29} -> (i2)^{42}
(w)^{29} -> (l)^{44}
(w)^{29} -> (l)^{45}
(w)^{27} -> (w)^{29}
(w)^{27} -> (p)^{30}
(w)^{27} -> (q)^{31}
(w)^{27} -> (a)^{32}
(w)^{27} -> (i)^{33}
(w)^{27} -> (i)^{35}
(w)^{27} -> (csi)^{36}
(w)^{27} -> (nsi)^{38}
(w)^{27} -> (nsi)^{39}
(w)^{27} -> (i2)^{40}
(w)^{27} -> (i2)^{42}
(w)^{27} -> (l)^{44}
(w)^{27} -> (l)^{45}
(w)^{27} -> (w)^{29}
(w)^{29} -> (w)^{29}
(l)^{1} -> (a)^{32}
(l)^{25} -> (a)^{32}
(l)^{26} -> (a)^{32}
(l)^{44} -> (a)^{32}
(l)^{45} -> (a)^{32}
(i)^{35} -> (i)^{35}
(i)^{35} -> (csi)^{36}
(i)^{35} -> (nsi)^{38}
(i)^{35} -> (nsi)^{39}
(i)^{33} -> (i)^{35}
(i)^{33} -> (csi)^{36}
(i)^{33} -> (nsi)^{38}
(i)^{33} -> (nsi)^{39}
(i)^{33} -> (i)^{35}
(i)^{35} -> (i)^{35}
(a)^{32} -> (csi)^{36}
(csi)^{17} -> (csi)^{36}
(csi)^{36} -> (csi)^{36}
(p)^{30} -> (csi)^{36}
(q)^{31} -> (csi)^{36}
(i)^{35} -> (nsi)^{38}
(i)^{35} -> (nsi)^{39}
(a)^{32} -> (nsi)^{38}
(nsi)^{19} -> (nsi)^{38}
(nsi)^{20} -> (nsi)^{38}
(nsi)^{38} -> (nsi)^{38}
(nsi)^{39} -> (nsi)^{38}
(p)^{30} -> (nsi)^{38}
(q)^{31} -> (nsi)^{38}
(nsi)^{19} -> (nsi)^{39}
(nsi)^{20} -> (nsi)^{39}
(nsi)^{38} -> (nsi)^{39}
(nsi)^{39} -> (nsi)^{39}
(i2)^{42} -> (i2)^{42}
(i2)^{42} -> (l)^{44}
(i2)^{42} -> (l)^{45}
(i2)^{40} -> (i2)^{42}
(i2)^{40} -> (l)^{44}
(i2)^{40} -> (l)^{45}
(i2)^{40} -> (i2)^{42}
(i2)^{42} -> (i2)^{42}
(ns)^{7} -> (l)^{44}
(ns)^{3} -> (l)^{44}
(ns)^{7} -> (l)^{45}
(ns)^{3} -> (l)^{45}
(i2)^{42} -> (l)^{44}
(l)^{1} -> (l)^{44}
(l)^{25} -> (l)^{44}
(l)^{26} -> (l)^{44}
(l)^{44} -> (l)^{44}
(l)^{45} -> (l)^{44}
(l)^{1} -> (l)^{45}
(l)^{25} -> (l)^{45}
(l)^{26} -> (l)^{45}
(l)^{44} -> (l)^{45}
(l)^{45} -> (l)^{45}
ABSCFG result:
edge from 6 to 7  with constriant:  Variable Increase: [ cs <= cs + 0 ]  
edge from 5 to 6  with constriant:  Variable Decrease: [ j <= j - 1 ]  
edge from 4 to 5  with constriant:  Assume 0<j in WHILE: 
edge from 7 to 4  with constriant:  Variable Increase: [ ns <= ns + 0 ]  
edge from 18 to 19  with constriant:  Assume i>I in IF: 
edge from 18 to 20  with constriant:  Assume not(i>I) in IF: 
edge from 17 to 18  with constriant:  Variable Reset: [ csi <= INF ]  
edge from 16 to 17  with constriant:  Variable Decrease: [ i <= i - 1 ]  
edge from 15 to 16  with constriant:  Assume 0<i in WHILE: 
edge from 19 to 15  with constriant:  Variable Reset: [ nsi <= INF ]  
edge from 20 to 15  with constriant:  Variable Reset: [ nsi <= nsi + 0 ]  
edge from 24 to 25  with constriant:  Assume ns>I in IF: 
edge from 24 to 26  with constriant:  Assume not(ns>I) in IF: 
edge from 23 to 24  with constriant:  Variable Decrease: [ i2 <= i2 - 1 ]  
edge from 22 to 23  with constriant:  Assume 0<i2 in WHILE: 
edge from 25 to 22  with constriant:  Variable Reset: [ l <= INF ]  
edge from 26 to 22  with constriant:  Variable Reset: [ l <= l + 0 ]  
edge from 21 to 22  with constriant:  Variable Reset: [ i2 <= N ]  
edge from 15 to 21  with constriant:  Assume not(0<i) in WHILE: 
edge from 14 to 15  with constriant:  Variable Reset: [ i <= N ]  
edge from 13 to 14  with constriant:  Variable Reset: [ a <= Q ]  
edge from 12 to 13  with constriant:  Variable Reset: [ q <= c ]  
edge from 11 to 12  with constriant:  Variable Reset: [ p <= c ]  
edge from 10 to 11  with constriant:  Variable Decrease: [ w <= w - 1 ]  
edge from 9 to 10  with constriant:  Assume 0<w in WHILE: 
edge from 22 to 9  with constriant:  Assume not(0<i2) in WHILE: 
edge from 37 to 38  with constriant:  Assume i>I in IF: 
edge from 37 to 39  with constriant:  Assume not(i>I) in IF: 
edge from 36 to 37  with constriant:  Variable Reset: [ csi <= INF ]  
edge from 35 to 36  with constriant:  Variable Decrease: [ i <= i - 1 ]  
edge from 34 to 35  with constriant:  Assume 0<i in WHILE: 
edge from 38 to 34  with constriant:  Variable Reset: [ nsi <= INF ]  
edge from 39 to 34  with constriant:  Variable Reset: [ nsi <= nsi + 0 ]  
edge from 43 to 44  with constriant:  Assume ns>I in IF: 
edge from 43 to 45  with constriant:  Assume not(ns>I) in IF: 
edge from 42 to 43  with constriant:  Variable Decrease: [ i2 <= i2 - 1 ]  
edge from 41 to 42  with constriant:  Assume 0<i2 in WHILE: 
edge from 44 to 41  with constriant:  Variable Reset: [ l <= INF ]  
edge from 45 to 41  with constriant:  Variable Reset: [ l <= l + 0 ]  
edge from 40 to 41  with constriant:  Variable Reset: [ i2 <= N ]  
edge from 34 to 40  with constriant:  Assume not(0<i) in WHILE: 
edge from 33 to 34  with constriant:  Variable Reset: [ i <= N ]  
edge from 32 to 33  with constriant:  Variable Reset: [ a <= Q ]  
edge from 31 to 32  with constriant:  Variable Reset: [ q <= c ]  
edge from 30 to 31  with constriant:  Variable Reset: [ p <= c ]  
edge from 29 to 30  with constriant:  Variable Decrease: [ w <= w - 1 ]  
edge from 28 to 29  with constriant:  Assume 0<w in WHILE: 
edge from 41 to 28  with constriant:  Assume not(0<i2) in WHILE: 
edge from 27 to 28  with constriant:  Variable Reset: [ w <= k ]  
edge from 9 to 27  with constriant:  Assume not(0<w) in WHILE: 
edge from 8 to 9  with constriant:  Variable Reset: [ w <= k ]  
edge from 4 to 8  with constriant:  Assume not(0<j) in WHILE: 
edge from 3 to 4  with constriant:  Variable Reset: [ ns <= -1 ]  
edge from 2 to 3  with constriant:  Variable Reset: [ cs <= -1 ]  
edge from 1 to 2  with constriant:  Variable Reset: [ l <= 0 ]  
edge from 0 to 1  with constriant:  Variable Reset: [ j <= N ]  
edge from 28 to -1  with constriant:  Assume not(0<w) in WHILE: 

(6, 7), (5, 6), (4, 5), (7, 4), (18, 19), (18, 20), (17, 18), (16, 17), (15, 16), (19, 15), (20, 15), (24, 25), (24, 26), (23, 24), (22, 23), (25, 22), (26, 22), (21, 22), (15, 21), (14, 15), (13, 14), (12, 13), (11, 12), (10, 11), (9, 10), (22, 9), (37, 38), (37, 39), (36, 37), (35, 36), (34, 35), (38, 34), (39, 34), (43, 44), (43, 45), (42, 43), (41, 42), (44, 41), (45, 41), (40, 41), (34, 40), (33, 34), (32, 33), (31, 32), (30, 31), (29, 30), (28, 29), (41, 28), (27, 28), (9, 27), (8, 9), (4, 8), (3, 4), (2, 3), (1, 2), (0, 1), (28, -1), 
(6, [ DifferenceConstraint("cs", None, "0", DifferenceConstraint.DCType.INC) ], 7, [6]),
(5, [ DifferenceConstraint("j", None, "1", DifferenceConstraint.DCType.DEC) ], 6, [5]),
(4, [ DifferenceConstraint("WHILE:0<j", None, None, DifferenceConstraint.DCType.ASUM) ], 5, [4]),
(7, [ DifferenceConstraint("ns", None, "0", DifferenceConstraint.DCType.INC) ], 4, [7]),
(18, [ DifferenceConstraint("IF:i>I", None, None, DifferenceConstraint.DCType.ASUM) ], 19, [18]),
(18, [ DifferenceConstraint("IF:not(i>I)", None, None, DifferenceConstraint.DCType.ASUM) ], 20, [18]),
(17, [ DifferenceConstraint("csi", None,"INF", DifferenceConstraint.DCType.RESET) ], 18, [17]),
(16, [ DifferenceConstraint("i", None, "1", DifferenceConstraint.DCType.DEC) ], 17, [16]),
(15, [ DifferenceConstraint("WHILE:0<i", None, None, DifferenceConstraint.DCType.ASUM) ], 16, [15]),
(19, [ DifferenceConstraint("nsi", None,"INF", DifferenceConstraint.DCType.RESET) ], 15, [19]),
(20, [ DifferenceConstraint("nsi", "nsi","0", DifferenceConstraint.DCType.RESET) ], 15, [20]),
(24, [ DifferenceConstraint("IF:ns>I", None, None, DifferenceConstraint.DCType.ASUM) ], 25, [24]),
(24, [ DifferenceConstraint("IF:not(ns>I)", None, None, DifferenceConstraint.DCType.ASUM) ], 26, [24]),
(23, [ DifferenceConstraint("i2", None, "1", DifferenceConstraint.DCType.DEC) ], 24, [23]),
(22, [ DifferenceConstraint("WHILE:0<i2", None, None, DifferenceConstraint.DCType.ASUM) ], 23, [22]),
(25, [ DifferenceConstraint("l", None,"INF", DifferenceConstraint.DCType.RESET) ], 22, [25]),
(26, [ DifferenceConstraint("l", "l","0", DifferenceConstraint.DCType.RESET) ], 22, [26]),
(21, [ DifferenceConstraint("i2", None,"N", DifferenceConstraint.DCType.RESET) ], 22, [21]),
(15, [ DifferenceConstraint("WHILE:not(0<i)", None, None, DifferenceConstraint.DCType.ASUM) ], 21, [15]),
(14, [ DifferenceConstraint("i", None,"N", DifferenceConstraint.DCType.RESET) ], 15, [14]),
(13, [ DifferenceConstraint("a", None,"Q", DifferenceConstraint.DCType.RESET) ], 14, [13]),
(12, [ DifferenceConstraint("q", None,"c", DifferenceConstraint.DCType.RESET) ], 13, [12]),
(11, [ DifferenceConstraint("p", None,"c", DifferenceConstraint.DCType.RESET) ], 12, [11]),
(10, [ DifferenceConstraint("w", None, "1", DifferenceConstraint.DCType.DEC) ], 11, [10]),
(9, [ DifferenceConstraint("WHILE:0<w", None, None, DifferenceConstraint.DCType.ASUM) ], 10, [9]),
(22, [ DifferenceConstraint("WHILE:not(0<i2)", None, None, DifferenceConstraint.DCType.ASUM) ], 9, [22]),
(37, [ DifferenceConstraint("IF:i>I", None, None, DifferenceConstraint.DCType.ASUM) ], 38, [37]),
(37, [ DifferenceConstraint("IF:not(i>I)", None, None, DifferenceConstraint.DCType.ASUM) ], 39, [37]),
(36, [ DifferenceConstraint("csi", None,"INF", DifferenceConstraint.DCType.RESET) ], 37, [36]),
(35, [ DifferenceConstraint("i", None, "1", DifferenceConstraint.DCType.DEC) ], 36, [35]),
(34, [ DifferenceConstraint("WHILE:0<i", None, None, DifferenceConstraint.DCType.ASUM) ], 35, [34]),
(38, [ DifferenceConstraint("nsi", None,"INF", DifferenceConstraint.DCType.RESET) ], 34, [38]),
(39, [ DifferenceConstraint("nsi", "nsi","0", DifferenceConstraint.DCType.RESET) ], 34, [39]),
(43, [ DifferenceConstraint("IF:ns>I", None, None, DifferenceConstraint.DCType.ASUM) ], 44, [43]),
(43, [ DifferenceConstraint("IF:not(ns>I)", None, None, DifferenceConstraint.DCType.ASUM) ], 45, [43]),
(42, [ DifferenceConstraint("i2", None, "1", DifferenceConstraint.DCType.DEC) ], 43, [42]),
(41, [ DifferenceConstraint("WHILE:0<i2", None, None, DifferenceConstraint.DCType.ASUM) ], 42, [41]),
(44, [ DifferenceConstraint("l", None,"INF", DifferenceConstraint.DCType.RESET) ], 41, [44]),
(45, [ DifferenceConstraint("l", "l","0", DifferenceConstraint.DCType.RESET) ], 41, [45]),
(40, [ DifferenceConstraint("i2", None,"N", DifferenceConstraint.DCType.RESET) ], 41, [40]),
(34, [ DifferenceConstraint("WHILE:not(0<i)", None, None, DifferenceConstraint.DCType.ASUM) ], 40, [34]),
(33, [ DifferenceConstraint("i", None,"N", DifferenceConstraint.DCType.RESET) ], 34, [33]),
(32, [ DifferenceConstraint("a", None,"Q", DifferenceConstraint.DCType.RESET) ], 33, [32]),
(31, [ DifferenceConstraint("q", None,"c", DifferenceConstraint.DCType.RESET) ], 32, [31]),
(30, [ DifferenceConstraint("p", None,"c", DifferenceConstraint.DCType.RESET) ], 31, [30]),
(29, [ DifferenceConstraint("w", None, "1", DifferenceConstraint.DCType.DEC) ], 30, [29]),
(28, [ DifferenceConstraint("WHILE:0<w", None, None, DifferenceConstraint.DCType.ASUM) ], 29, [28]),
(41, [ DifferenceConstraint("WHILE:not(0<i2)", None, None, DifferenceConstraint.DCType.ASUM) ], 28, [41]),
(27, [ DifferenceConstraint("w", None,"k", DifferenceConstraint.DCType.RESET) ], 28, [27]),
(9, [ DifferenceConstraint("WHILE:not(0<w)", None, None, DifferenceConstraint.DCType.ASUM) ], 27, [9]),
(8, [ DifferenceConstraint("w", None,"k", DifferenceConstraint.DCType.RESET) ], 9, [8]),
(4, [ DifferenceConstraint("WHILE:not(0<j)", None, None, DifferenceConstraint.DCType.ASUM) ], 8, [4]),
(3, [ DifferenceConstraint("ns", None,"-1", DifferenceConstraint.DCType.RESET) ], 4, [3]),
(2, [ DifferenceConstraint("cs", None,"-1", DifferenceConstraint.DCType.RESET) ], 3, [2]),
(1, [ DifferenceConstraint("l", None,"0", DifferenceConstraint.DCType.RESET) ], 2, [1]),
(0, [ DifferenceConstraint("j", None,"N", DifferenceConstraint.DCType.RESET) ], 1, [0]),
(28, [ DifferenceConstraint("WHILE:not(0<w)", None, None, DifferenceConstraint.DCType.ASUM) ], -1, [28]),

computation of the abscfg total time:0.001384s
46 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] [[5, 5], [5, 6], [5, 7], [0, 5], [0, 6], [0, 7], [0, 5], [5, 5], [2, 6], [6, 6], [3, 7], [7, 7], [10, 10], [10, 11], [10, 12], [10, 13], [10, 14], [10, 16], [10, 17], [10, 19], [10, 20], [10, 21], [10, 23], [10, 25], [10, 26], [8, 10], [8, 11], [8, 12], [8, 13], [8, 14], [8, 16], [8, 17], [8, 19], [8, 20], [8, 21], [8, 23], [8, 25], [8, 26], [8, 10], [10, 10], [1, 13], [25, 13], [26, 13], [16, 16], [16, 17], [16, 19], [16, 20], [14, 16], [14, 17], [14, 19], [14, 20], [14, 16], [16, 16], [13, 17], [17, 17], [11, 17], [12, 17], [16, 19], [16, 20], [13, 19], [19, 19], [20, 19], [11, 19], [12, 19], [19, 20], [20, 20], [23, 23], [23, 25], [23, 26], [21, 23], [21, 25], [21, 26], [21, 23], [23, 23], [7, 25], [3, 25], [7, 26], [3, 26], [23, 25], [1, 25], [25, 25], [26, 25], [1, 26], [25, 26], [26, 26], [29, 29], [29, 30], [29, 31], [29, 32], [29, 33], [29, 35], [29, 36], [29, 38], [29, 39], [29, 40], [29, 42], [29, 44], [29, 45], [27, 29], [27, 30], [27, 31], [27, 32], [27, 33], [27, 35], [27, 36], [27, 38], [27, 39], [27, 40], [27, 42], [27, 44], [27, 45], [27, 29], [29, 29], [1, 32], [25, 32], [26, 32], [44, 32], [45, 32], [35, 35], [35, 36], [35, 38], [35, 39], [33, 35], [33, 36], [33, 38], [33, 39], [33, 35], [35, 35], [32, 36], [17, 36], [36, 36], [30, 36], [31, 36], [35, 38], [35, 39], [32, 38], [19, 38], [20, 38], [38, 38], [39, 38], [30, 38], [31, 38], [19, 39], [20, 39], [38, 39], [39, 39], [42, 42], [42, 44], [42, 45], [40, 42], [40, 44], [40, 45], [40, 42], [42, 42], [7, 44], [3, 44], [7, 45], [3, 45], [42, 44], [1, 44], [25, 44], [26, 44], [44, 44], [45, 44], [1, 45], [25, 45], [26, 45], [44, 45], [45, 45]]
('cs', '', '0', 'INC')
('j', '', '1', 'DEC')
('WHILE:0<j', '', '', 'ASUM')
('ns', '', '0', 'INC')
('IF:i>I', '', '', 'ASUM')
('IF:not(i>I)', '', '', 'ASUM')
('csi', '', 'INF', 'RESET')
('i', '', '1', 'DEC')
('WHILE:0<i', '', '', 'ASUM')
('nsi', '', 'INF', 'RESET')
('nsi', 'nsi', '0', 'RESET')
('IF:ns>I', '', '', 'ASUM')
('IF:not(ns>I)', '', '', 'ASUM')
('i2', '', '1', 'DEC')
('WHILE:0<i2', '', '', 'ASUM')
('l', '', 'INF', 'RESET')
('l', 'l', '0', 'RESET')
('i2', '', 'N', 'RESET')
('WHILE:not(0<i)', '', '', 'ASUM')
('i', '', 'N', 'RESET')
('a', '', 'Q', 'RESET')
('q', '', 'c', 'RESET')
('p', '', 'c', 'RESET')
('w', '', '1', 'DEC')
('WHILE:0<w', '', '', 'ASUM')
('WHILE:not(0<i2)', '', '', 'ASUM')
('IF:i>I', '', '', 'ASUM')
('IF:not(i>I)', '', '', 'ASUM')
('csi', '', 'INF', 'RESET')
('i', '', '1', 'DEC')
('WHILE:0<i', '', '', 'ASUM')
('nsi', '', 'INF', 'RESET')
('nsi', 'nsi', '0', 'RESET')
('IF:ns>I', '', '', 'ASUM')
('IF:not(ns>I)', '', '', 'ASUM')
('i2', '', '1', 'DEC')
('WHILE:0<i2', '', '', 'ASUM')
('l', '', 'INF', 'RESET')
('l', 'l', '0', 'RESET')
('i2', '', 'N', 'RESET')
('WHILE:not(0<i)', '', '', 'ASUM')
('i', '', 'N', 'RESET')
('a', '', 'Q', 'RESET')
('q', '', 'c', 'RESET')
('p', '', 'c', 'RESET')
('w', '', '1', 'DEC')
('WHILE:0<w', '', '', 'ASUM')
('WHILE:not(0<i2)', '', '', 'ASUM')
('w', '', 'k', 'RESET')
('WHILE:not(0<w)', '', '', 'ASUM')
('w', '', 'k', 'RESET')
('WHILE:not(0<j)', '', '', 'ASUM')
('ns', '', '-1', 'RESET')
('cs', '', '-1', 'RESET')
('l', '', '0', 'RESET')
('j', '', 'N', 'RESET')
('WHILE:not(0<w)', '', '', 'ASUM')
47 [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [4, 8], [5, 6], [6, 7], [7, 4], [8, 9], [9, 10], [9, 27], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [15, 21], [16, 17], [17, 18], [18, 19], [18, 20], [19, 15], [20, 15], [21, 22], [22, 23], [22, 9], [23, 24], [24, 25], [24, 26], [25, 22], [26, 22], [27, 28], [28, 29], [28, 46], [29, 30], [30, 31], [31, 32], [32, 33], [33, 34], [34, 35], [34, 40], [35, 36], [36, 37], [37, 38], [37, 39], [38, 34], [39, 34], [40, 41], [41, 42], [41, 28], [42, 43], [43, 44], [43, 45], [44, 41], [45, 41]] [(0, [<abstract_transition_graph.DifferenceConstraint object at 0x109786860>], 1, [0]), (1, [<abstract_transition_graph.DifferenceConstraint object at 0x109786830>], 2, [1]), (2, [<abstract_transition_graph.DifferenceConstraint object at 0x109786800>], 3, [2]), (3, [<abstract_transition_graph.DifferenceConstraint object at 0x1097867d0>], 4, [3]), (4, [<abstract_transition_graph.DifferenceConstraint object at 0x109786020>], 5, [4]), (4, [<abstract_transition_graph.DifferenceConstraint object at 0x1097867a0>], 8, [4]), (5, [<abstract_transition_graph.DifferenceConstraint object at 0x109785ff0>], 6, [5]), (6, [<abstract_transition_graph.DifferenceConstraint object at 0x109785fc0>], 7, [6]), (7, [<abstract_transition_graph.DifferenceConstraint object at 0x109786050>], 4, [7]), (8, [<abstract_transition_graph.DifferenceConstraint object at 0x109786770>], 9, [8]), (9, [<abstract_transition_graph.DifferenceConstraint object at 0x1096d4700>], 10, [9]), (9, [<abstract_transition_graph.DifferenceConstraint object at 0x109786740>], 27, [9]), (10, [<abstract_transition_graph.DifferenceConstraint object at 0x1096d4760>], 11, [10]), (11, [<abstract_transition_graph.DifferenceConstraint object at 0x1096d46a0>], 12, [11]), (12, [<abstract_transition_graph.DifferenceConstraint object at 0x1097626e0>], 13, [12]), (13, [<abstract_transition_graph.DifferenceConstraint object at 0x1097626b0>], 14, [13]), (14, [<abstract_transition_graph.DifferenceConstraint object at 0x109760460>], 15, [14]), (15, [<abstract_transition_graph.DifferenceConstraint object at 0x109786140>], 16, [15]), (15, [<abstract_transition_graph.DifferenceConstraint object at 0x1097628f0>], 21, [15]), (16, [<abstract_transition_graph.DifferenceConstraint object at 0x109786110>], 17, [16]), (17, [<abstract_transition_graph.DifferenceConstraint object at 0x1097860e0>], 18, [17]), (18, [<abstract_transition_graph.DifferenceConstraint object at 0x109786080>], 19, [18]), (18, [<abstract_transition_graph.DifferenceConstraint object at 0x1097860b0>], 20, [18]), (19, [<abstract_transition_graph.DifferenceConstraint object at 0x109786170>], 15, [19]), (20, [<abstract_transition_graph.DifferenceConstraint object at 0x1097861a0>], 15, [20]), (21, [<abstract_transition_graph.DifferenceConstraint object at 0x109762920>], 22, [21]), (22, [<abstract_transition_graph.DifferenceConstraint object at 0x109786260>], 23, [22]), (22, [<abstract_transition_graph.DifferenceConstraint object at 0x1097862c0>], 9, [22]), (23, [<abstract_transition_graph.DifferenceConstraint object at 0x109786230>], 24, [23]), (24, [<abstract_transition_graph.DifferenceConstraint object at 0x1097861d0>], 25, [24]), (24, [<abstract_transition_graph.DifferenceConstraint object at 0x109786200>], 26, [24]), (25, [<abstract_transition_graph.DifferenceConstraint object at 0x109786290>], 22, [25]), (26, [<abstract_transition_graph.DifferenceConstraint object at 0x1097629e0>], 22, [26]), (27, [<abstract_transition_graph.DifferenceConstraint object at 0x109786710>], 28, [27]), (28, [<abstract_transition_graph.DifferenceConstraint object at 0x1097866b0>], 29, [28]), (28, [<abstract_transition_graph.DifferenceConstraint object at 0x109786890>], -1, [28]), (29, [<abstract_transition_graph.DifferenceConstraint object at 0x109786680>], 30, [29]), (30, [<abstract_transition_graph.DifferenceConstraint object at 0x109786650>], 31, [30]), (31, [<abstract_transition_graph.DifferenceConstraint object at 0x109786620>], 32, [31]), (32, [<abstract_transition_graph.DifferenceConstraint object at 0x1097865f0>], 33, [32]), (33, [<abstract_transition_graph.DifferenceConstraint object at 0x1097865c0>], 34, [33]), (34, [<abstract_transition_graph.DifferenceConstraint object at 0x1097863b0>], 35, [34]), (34, [<abstract_transition_graph.DifferenceConstraint object at 0x109786590>], 40, [34]), (35, [<abstract_transition_graph.DifferenceConstraint object at 0x109786380>], 36, [35]), (36, [<abstract_transition_graph.DifferenceConstraint object at 0x109786350>], 37, [36]), (37, [<abstract_transition_graph.DifferenceConstraint object at 0x1097862f0>], 38, [37]), (37, [<abstract_transition_graph.DifferenceConstraint object at 0x109786320>], 39, [37]), (38, [<abstract_transition_graph.DifferenceConstraint object at 0x1097863e0>], 34, [38]), (39, [<abstract_transition_graph.DifferenceConstraint object at 0x109786410>], 34, [39]), (40, [<abstract_transition_graph.DifferenceConstraint object at 0x109786560>], 41, [40]), (41, [<abstract_transition_graph.DifferenceConstraint object at 0x1097864d0>], 42, [41]), (41, [<abstract_transition_graph.DifferenceConstraint object at 0x1097866e0>], 28, [41]), (42, [<abstract_transition_graph.DifferenceConstraint object at 0x1097864a0>], 43, [42]), (43, [<abstract_transition_graph.DifferenceConstraint object at 0x109786440>], 44, [43]), (43, [<abstract_transition_graph.DifferenceConstraint object at 0x109786470>], 45, [43]), (44, [<abstract_transition_graph.DifferenceConstraint object at 0x109786500>], 41, [44]), (45, [<abstract_transition_graph.DifferenceConstraint object at 0x109786530>], 41, [45])]
THE LOCAL BOUNDS ARE:  [('1', 1), ('1', 1), ('1', 1), ('1', 1), ('j', '1'), ('1', 1), ('j', '1'), ('j', '1'), ('j', '1'), ('1', 1), ('w', '1'), ('1', 1), ('w', '1'), ('w', '1'), ('w', '1'), ('w', '1'), ('w', '1'), ('i', '1'), ('w', '1'), ('i', '1'), ('i', '1'), ('i', '1'), ('i', '1'), ('i', '1'), ('i', '1'), ('w', '1'), ('i2', '1'), ('w', '1'), ('i2', '1'), ('i2', '1'), ('i2', '1'), ('i2', '1'), ('i2', '1'), ('1', 1), ('w', '1'), ('1', 1), ('w', '1'), ('w', '1'), ('w', '1'), ('w', '1'), ('w', '1'), ('i', '1'), ('w', '1'), ('i', '1'), ('i', '1'), ('i', '1'), ('i', '1'), ('i', '1'), ('i', '1'), ('w', '1'), ('i2', '1'), ('w', '1'), ('i2', '1'), ('i2', '1'), ('i2', '1'), ('i2', '1'), ('i2', '1')]
[39, 38]
visiting vertex 39 from vertex 38  with its query annotation:  0 and accumulated query number  0
visiting vertex 39 from vertex 39  with its query annotation:  0 and accumulated query number  0
update the adaptivity with self loop  with accumulate adaptivity 0 with weight  0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1  and accumulate weight and query number min(min(0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1, 0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1), 0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1) 0
visiting vertex 38 from vertex 39  with its query annotation:  0 and accumulated query number  0
visiting vertex 38 from vertex 38  with its query annotation:  0 and accumulated query number  0
update the adaptivity with self loop  with accumulate adaptivity 0 with weight  0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1  and accumulate weight and query number min(0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1, 0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1) 0
[36]
visiting vertex 36 from vertex 36  with its query annotation:  0 and accumulated query number  0
update the adaptivity with self loop  with accumulate adaptivity 0 with weight  0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1  and accumulate weight and query number min(0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1, 0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1) 0
[32]
[44, 45]
visiting vertex 45 from vertex 44  with its query annotation:  0 and accumulated query number  0
visiting vertex 45 from vertex 45  with its query annotation:  0 and accumulated query number  0
update the adaptivity with self loop  with accumulate adaptivity 0 with weight  0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1  and accumulate weight and query number min(min(0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1, 0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1), 0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1) 0
visiting vertex 44 from vertex 45  with its query annotation:  0 and accumulated query number  0
visiting vertex 44 from vertex 44  with its query annotation:  0 and accumulated query number  0
update the adaptivity with self loop  with accumulate adaptivity 0 with weight  0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1  and accumulate weight and query number min(0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1, 0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1) 0
[20, 19]
visiting vertex 20 from vertex 19  with its query annotation:  0 and accumulated query number  0
visiting vertex 20 from vertex 20  with its query annotation:  0 and accumulated query number  0
update the adaptivity with self loop  with accumulate adaptivity 0 with weight  0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1  and accumulate weight and query number min(min(0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1, 0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1), 0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1) 0
visiting vertex 19 from vertex 20  with its query annotation:  0 and accumulated query number  0
visiting vertex 19 from vertex 19  with its query annotation:  0 and accumulated query number  0
update the adaptivity with self loop  with accumulate adaptivity 0 with weight  0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1  and accumulate weight and query number min(0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1, 0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1) 0
[17]
visiting vertex 17 from vertex 17  with its query annotation:  0 and accumulated query number  0
update the adaptivity with self loop  with accumulate adaptivity 0 with weight  0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1  and accumulate weight and query number min(0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1, 0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1) 0
[13]
[25, 26]
visiting vertex 26 from vertex 25  with its query annotation:  0 and accumulated query number  0
visiting vertex 26 from vertex 26  with its query annotation:  0 and accumulated query number  0
update the adaptivity with self loop  with accumulate adaptivity 0 with weight  0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1  and accumulate weight and query number min(min(0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1, 0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1), 0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1) 0
visiting vertex 25 from vertex 26  with its query annotation:  0 and accumulated query number  0
visiting vertex 25 from vertex 25  with its query annotation:  0 and accumulated query number  0
update the adaptivity with self loop  with accumulate adaptivity 0 with weight  0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1  and accumulate weight and query number min(0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1, 0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1) 0
[7]
visiting vertex 7 from vertex 7  with its query annotation:  0 and accumulated query number  0
update the adaptivity with self loop  with accumulate adaptivity 0 with weight  0 + 1 * (N)/1  and accumulate weight and query number min(0 + 1 * (N)/1, 0 + 1 * (N)/1) 0
[6]
visiting vertex 6 from vertex 6  with its query annotation:  0 and accumulated query number  0
update the adaptivity with self loop  with accumulate adaptivity 0 with weight  0 + 1 * (N)/1  and accumulate weight and query number min(0 + 1 * (N)/1, 0 + 1 * (N)/1) 0
[5]
visiting vertex 5 from vertex 5  with its query annotation:  0 and accumulated query number  0
update the adaptivity with self loop  with accumulate adaptivity 0 with weight  0 + 1 * (N)/1  and accumulate weight and query number min(0 + 1 * (N)/1, 0 + 1 * (N)/1) 0
visiting vertex 5 from vertex 5  with its query annotation:  0 and accumulated query number  0
update the adaptivity with self loop  with accumulate adaptivity 0 with weight  0 + 1 * (N)/1  and accumulate weight and query number min(0 + 1 * (N)/1, 0 + 1 * (N)/1) 0
[0]
[1]
[2]
[3]
[4]
[23]
visiting vertex 23 from vertex 23  with its query annotation:  0 and accumulated query number  0
update the adaptivity with self loop  with accumulate adaptivity 0 with weight  0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1  and accumulate weight and query number min(0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1, 0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1) 0
visiting vertex 23 from vertex 23  with its query annotation:  0 and accumulated query number  0
update the adaptivity with self loop  with accumulate adaptivity 0 with weight  0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1  and accumulate weight and query number min(0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1, 0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1) 0
[21]
[16]
visiting vertex 16 from vertex 16  with its query annotation:  0 and accumulated query number  0
update the adaptivity with self loop  with accumulate adaptivity 0 with weight  0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1  and accumulate weight and query number min(0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1, 0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1) 0
visiting vertex 16 from vertex 16  with its query annotation:  0 and accumulated query number  0
update the adaptivity with self loop  with accumulate adaptivity 0 with weight  0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1  and accumulate weight and query number min(0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1, 0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1) 0
[14]
[12]
[11]
[10]
visiting vertex 10 from vertex 10  with its query annotation:  0 and accumulated query number  0
update the adaptivity with self loop  with accumulate adaptivity 0 with weight  0 + 1 * (k) + 1 * (k)/1  and accumulate weight and query number min(0 + 1 * (k) + 1 * (k)/1, 0 + 1 * (k) + 1 * (k)/1) 0
visiting vertex 10 from vertex 10  with its query annotation:  0 and accumulated query number  0
update the adaptivity with self loop  with accumulate adaptivity 0 with weight  0 + 1 * (k) + 1 * (k)/1  and accumulate weight and query number min(0 + 1 * (k) + 1 * (k)/1, 0 + 1 * (k) + 1 * (k)/1) 0
[8]
[9]
[15]
[18]
[22]
[24]
[42]
visiting vertex 42 from vertex 42  with its query annotation:  0 and accumulated query number  0
update the adaptivity with self loop  with accumulate adaptivity 0 with weight  0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1  and accumulate weight and query number min(0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1, 0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1) 0
visiting vertex 42 from vertex 42  with its query annotation:  0 and accumulated query number  0
update the adaptivity with self loop  with accumulate adaptivity 0 with weight  0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1  and accumulate weight and query number min(0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1, 0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1) 0
[40]
[35]
visiting vertex 35 from vertex 35  with its query annotation:  0 and accumulated query number  0
update the adaptivity with self loop  with accumulate adaptivity 0 with weight  0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1  and accumulate weight and query number min(0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1, 0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1) 0
visiting vertex 35 from vertex 35  with its query annotation:  0 and accumulated query number  0
update the adaptivity with self loop  with accumulate adaptivity 0 with weight  0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1  and accumulate weight and query number min(0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1, 0 + 0 + 1 * (k) + 1 * (k)/1 * (N) + 0 + 1 * (k) + 1 * (k)/1 * (N)/1) 0
[33]
[31]
[30]
[29]
visiting vertex 29 from vertex 29  with its query annotation:  0 and accumulated query number  0
update the adaptivity with self loop  with accumulate adaptivity 0 with weight  0 + 1 * (k) + 1 * (k)/1  and accumulate weight and query number min(0 + 1 * (k) + 1 * (k)/1, 0 + 1 * (k) + 1 * (k)/1) 0
visiting vertex 29 from vertex 29  with its query annotation:  0 and accumulated query number  0
update the adaptivity with self loop  with accumulate adaptivity 0 with weight  0 + 1 * (k) + 1 * (k)/1  and accumulate weight and query number min(0 + 1 * (k) + 1 * (k)/1, 0 + 1 * (k) + 1 * (k)/1) 0
[27]
[28]
[34]
[37]
[41]
[43]
The Adaptivity From This Graph is:  1
The Total Query Number For This Graph is:  0 + 1 * (k) + 1 * (k)/1 + 0 + 1 * (k) + 1 * (k)/1
The Estimated Generalization Error with an Optimial qurey computation Mechanism is O( 1.4142135623730951 /√N )
--- ADAPTIVITY COMPUTATION TIME: 22539.638295173645 seconds ---
crc-dot1x-nat-10-239-36-38:adaptDune admin$ 